(include "pattern-matcher.scm")
          
(define const?
  (lambda (val)
    (or
     (equal? val `())
     (vector? val)
     (boolean? val)
     (char? val)
     (number? val)
     (string? val)
     )))

(define quote?
  (lambda (val)
    (if (list? val)
        (if (equal? (car val) 'quote) #t #f)
        #f)))
    
;; VARIABLES

(define var?
  (lambda (val)
    (not (is-reserved? val))
    ))

  (define is-reserved?
    (lambda (val)
      (ormap (lambda (item) (equal? val item)) *reserved-words*)
      ))
           
    
(define *reserved-words*
  '(and begin cond define do else if lambda
        let let* letrec or quasiquote unquote
        unquote-splicing quote set!))


(define parse
  (let ((run
         (compose-patterns
          (pattern-rule
           (? 'c const?) (lambda (c) `(const ,c)))
          (pattern-rule
           (? 'c quote?) (lambda (c) `(const ,@(cdr c))))
          (pattern-rule
           `(if  ,(? 'test) ,(? 'dit) ,(? 'dif))
           (lambda (<test> <dit> <dif>)
            `(if3 ,(parse <test>) ,(parse <dit>) ,(parse <dif>))))
          (pattern-rule
           `(if  ,(? 'test) ,(? 'dit))
           (lambda (<test> <dit>)
            `(if3 ,(parse <test>) ,(parse <dit>) ,(parse (void)))))
          
          (pattern-rule
           `(or  ,(? 'expr) . ,(? 'lst list?))
           (lambda (expr lst)  `(or ,(cons (parse expr)  (map (lambda (item) (parse item)) lst)) )))


          (pattern-rule
           (? 'v var?) (lambda (v) `(var ,v)))
             ;(map (lambda (expr) (parse expr)) list-exprs)))
          ;(pattern-rule
          ;(? 'v var?) (lambda (v) (if (symbol? v)
          ;                           `(var ,(string->list (symbol->string v)))
          ;                            `(var ,@v))))
          
          )))
         (lambda (e) (run e
	   (lambda ()
	     (error 'parse
		    (format "I can't recognize this: ~s" e)))))))
            