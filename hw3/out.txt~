Chez Scheme Version 9.4.1
Copyright 1984-2016 Cisco Systems, Inc.

> > > hello im in replace-set 
v: compute
body: (seq ((set (var counter) (const 0)) (set (var how-many-calls) (lambda-simple () (var counter))) (set (var reset-count) (lambda-simple () (set (var counter) (const 0)))) (set (var compute) (lambda-simple (arg) (seq ((set (var counter) (applic (var +) ((var counter) (const 1)))) (applic (var proc) ((var arg))))))) (set (var dispatch) (lambda-simple (op arg) (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (var how-many-calls) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (var reset-count) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (var compute) ((var arg))) (const 0)))))) (var dispatch)))
case3
hello im in replace-set 
v: compute
body: (set (var dispatch) (lambda-simple (op arg) (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (var how-many-calls) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (var reset-count) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (var compute) ((var arg))) (const 0))))))
case0
hello im in replace-set 
v: compute
body: (lambda-simple (op arg) (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (var how-many-calls) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (var reset-count) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (var compute) ((var arg))) (const 0)))))
case1
hello im in replace-set 
v: compute
body: (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (var how-many-calls) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (var reset-count) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (var compute) ((var arg))) (const 0))))
case5
hello im in replace-set 
v: compute
body: (applic (var eq?) ((var op) (const how-many-calls?)))
case4
hello im in replace-set 
v: compute
body: (var eq?)
case elsehello im in replace-set 
v: compute
body: (var op)
case elsehello im in replace-set 
v: compute
body: (const how-many-calls?)
case elsehello im in replace-set 
v: compute
body: (applic (var how-many-calls) ())
case4
hello im in replace-set 
v: compute
body: (var how-many-calls)
case elsehello im in replace-set 
v: compute
body: (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (var reset-count) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (var compute) ((var arg))) (const 0)))
case5
hello im in replace-set 
v: compute
body: (applic (var eq?) ((var op) (const reset-count)))
case4
hello im in replace-set 
v: compute
body: (var eq?)
case elsehello im in replace-set 
v: compute
body: (var op)
case elsehello im in replace-set 
v: compute
body: (const reset-count)
case elsehello im in replace-set 
v: compute
body: (applic (var reset-count) ())
case4
hello im in replace-set 
v: compute
body: (var reset-count)
case elsehello im in replace-set 
v: compute
body: (if3 (applic (var eq?) ((var op) (const compute))) (applic (var compute) ((var arg))) (const 0))
case5
hello im in replace-set 
v: compute
body: (applic (var eq?) ((var op) (const compute)))
case4
hello im in replace-set 
v: compute
body: (var eq?)
case elsehello im in replace-set 
v: compute
body: (var op)
case elsehello im in replace-set 
v: compute
body: (const compute)
case elsehello im in replace-set 
v: compute
body: (applic (var compute) ((var arg)))
case4
hello im in replace-set 
v: compute
body: (var compute)
case elsehello im in replace-set 
v: compute
body: (var arg)
case elsehello im in replace-set 
v: compute
body: (const 0)
case elsehello im in replace-set 
v: compute
body: (var dispatch)
case elsehello im in replace-set 
v: compute
body: (set (var reset-count) (lambda-simple () (set (var counter) (const 0))))
case0
hello im in replace-set 
v: compute
body: (lambda-simple () (set (var counter) (const 0)))
case1
hello im in replace-set 
v: compute
body: (set (var counter) (const 0))
case0
hello im in replace-set 
v: compute
body: (const 0)
case elsehello im in replace-set 
v: compute
body: (set (var compute) (lambda-simple (arg) (seq ((set (var counter) (applic (var +) ((var counter) (const 1)))) (applic (var proc) ((var arg)))))))
case0
hello im in replace-set 
v: compute
body: (set (var counter) (const 0))
case0
hello im in replace-set 
v: compute
body: (const 0)
case elsehello im in replace-set 
v: compute
body: (set (var how-many-calls) (lambda-simple () (var counter)))
case0
hello im in replace-set 
v: compute
body: (lambda-simple () (var counter))
case1
hello im in replace-set 
v: compute
body: (var counter)
case elsehello im in replace-set 
v: reset-count
body: (seq ((set (var compute) (box (var compute))) (set (var counter) (const 0)) (set (var how-many-calls) (lambda-simple () (var counter))) (set (var reset-count) (lambda-simple () (set (var counter) (const 0)))) (box-set (var compute) (lambda-simple (arg) (seq ((set (var counter) (applic (var +) ((var counter) (const 1)))) (applic (var proc) ((var arg))))))) (set (var dispatch) (lambda-simple (op arg) (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (var how-many-calls) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (var reset-count) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0)))))) (var dispatch)))
case3
hello im in replace-set 
v: reset-count
body: (var dispatch)
case elsehello im in replace-set 
v: reset-count
body: (box-set (var compute) (lambda-simple (arg) (seq ((set (var counter) (applic (var +) ((var counter) (const 1)))) (applic (var proc) ((var arg)))))))
case elsehello im in replace-set 
v: reset-count
body: (set (var dispatch) (lambda-simple (op arg) (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (var how-many-calls) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (var reset-count) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0))))))
case0
hello im in replace-set 
v: reset-count
body: (lambda-simple (op arg) (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (var how-many-calls) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (var reset-count) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0)))))
case1
hello im in replace-set 
v: reset-count
body: (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (var how-many-calls) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (var reset-count) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0))))
case5
hello im in replace-set 
v: reset-count
body: (applic (var eq?) ((var op) (const how-many-calls?)))
case4
hello im in replace-set 
v: reset-count
body: (var eq?)
case elsehello im in replace-set 
v: reset-count
body: (var op)
case elsehello im in replace-set 
v: reset-count
body: (const how-many-calls?)
case elsehello im in replace-set 
v: reset-count
body: (applic (var how-many-calls) ())
case4
hello im in replace-set 
v: reset-count
body: (var how-many-calls)
case elsehello im in replace-set 
v: reset-count
body: (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (var reset-count) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0)))
case5
hello im in replace-set 
v: reset-count
body: (applic (var eq?) ((var op) (const reset-count)))
case4
hello im in replace-set 
v: reset-count
body: (var eq?)
case elsehello im in replace-set 
v: reset-count
body: (var op)
case elsehello im in replace-set 
v: reset-count
body: (const reset-count)
case elsehello im in replace-set 
v: reset-count
body: (applic (var reset-count) ())
case4
hello im in replace-set 
v: reset-count
body: (var reset-count)
case elsehello im in replace-set 
v: reset-count
body: (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0))
case5
hello im in replace-set 
v: reset-count
body: (applic (var eq?) ((var op) (const compute)))
case4
hello im in replace-set 
v: reset-count
body: (var eq?)
case elsehello im in replace-set 
v: reset-count
body: (var op)
case elsehello im in replace-set 
v: reset-count
body: (const compute)
case elsehello im in replace-set 
v: reset-count
body: (applic (box-get (var compute)) ((var arg)))
case4
hello im in replace-set 
v: reset-count
body: (box-get (var compute))
case elsehello im in replace-set 
v: reset-count
body: (var arg)
case elsehello im in replace-set 
v: reset-count
body: (const 0)
case elsehello im in replace-set 
v: reset-count
body: (set (var how-many-calls) (lambda-simple () (var counter)))
case0
hello im in replace-set 
v: reset-count
body: (lambda-simple () (var counter))
case1
hello im in replace-set 
v: reset-count
body: (var counter)
case elsehello im in replace-set 
v: reset-count
body: (set (var reset-count) (lambda-simple () (set (var counter) (const 0))))
case0
hello im in replace-set 
v: reset-count
body: (set (var compute) (box (var compute)))
case0
hello im in replace-set 
v: reset-count
body: (box (var compute))
case elsehello im in replace-set 
v: reset-count
body: (set (var counter) (const 0))
case0
hello im in replace-set 
v: reset-count
body: (const 0)
case elsehello im in replace-set 
v: how-many-calls
body: (seq ((set (var reset-count) (box (var reset-count))) (set (var compute) (box (var compute))) (set (var counter) (const 0)) (set (var how-many-calls) (lambda-simple () (var counter))) (box-set (var reset-count) (lambda-simple () (set (var counter) (const 0)))) (box-set (var compute) (lambda-simple (arg) (seq ((set (var counter) (applic (var +) ((var counter) (const 1)))) (applic (var proc) ((var arg))))))) (set (var dispatch) (lambda-simple (op arg) (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (var how-many-calls) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (box-get (var reset-count)) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0)))))) (var dispatch)))
case3
hello im in replace-set 
v: how-many-calls
body: (set (var dispatch) (lambda-simple (op arg) (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (var how-many-calls) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (box-get (var reset-count)) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0))))))
case0
hello im in replace-set 
v: how-many-calls
body: (lambda-simple (op arg) (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (var how-many-calls) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (box-get (var reset-count)) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0)))))
case1
hello im in replace-set 
v: how-many-calls
body: (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (var how-many-calls) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (box-get (var reset-count)) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0))))
case5
hello im in replace-set 
v: how-many-calls
body: (applic (var eq?) ((var op) (const how-many-calls?)))
case4
hello im in replace-set 
v: how-many-calls
body: (var eq?)
case elsehello im in replace-set 
v: how-many-calls
body: (var op)
case elsehello im in replace-set 
v: how-many-calls
body: (const how-many-calls?)
case elsehello im in replace-set 
v: how-many-calls
body: (applic (var how-many-calls) ())
case4
hello im in replace-set 
v: how-many-calls
body: (var how-many-calls)
case elsehello im in replace-set 
v: how-many-calls
body: (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (box-get (var reset-count)) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0)))
case5
hello im in replace-set 
v: how-many-calls
body: (applic (var eq?) ((var op) (const reset-count)))
case4
hello im in replace-set 
v: how-many-calls
body: (var eq?)
case elsehello im in replace-set 
v: how-many-calls
body: (var op)
case elsehello im in replace-set 
v: how-many-calls
body: (const reset-count)
case elsehello im in replace-set 
v: how-many-calls
body: (applic (box-get (var reset-count)) ())
case4
hello im in replace-set 
v: how-many-calls
body: (box-get (var reset-count))
case elsehello im in replace-set 
v: how-many-calls
body: (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0))
case5
hello im in replace-set 
v: how-many-calls
body: (applic (var eq?) ((var op) (const compute)))
case4
hello im in replace-set 
v: how-many-calls
body: (var eq?)
case elsehello im in replace-set 
v: how-many-calls
body: (var op)
case elsehello im in replace-set 
v: how-many-calls
body: (const compute)
case elsehello im in replace-set 
v: how-many-calls
body: (applic (box-get (var compute)) ((var arg)))
case4
hello im in replace-set 
v: how-many-calls
body: (box-get (var compute))
case elsehello im in replace-set 
v: how-many-calls
body: (var arg)
case elsehello im in replace-set 
v: how-many-calls
body: (const 0)
case elsehello im in replace-set 
v: how-many-calls
body: (var dispatch)
case elsehello im in replace-set 
v: how-many-calls
body: (box-set (var reset-count) (lambda-simple () (set (var counter) (const 0))))
case elsehello im in replace-set 
v: how-many-calls
body: (box-set (var compute) (lambda-simple (arg) (seq ((set (var counter) (applic (var +) ((var counter) (const 1)))) (applic (var proc) ((var arg)))))))
case elsehello im in replace-set 
v: how-many-calls
body: (set (var counter) (const 0))
case0
hello im in replace-set 
v: how-many-calls
body: (const 0)
case elsehello im in replace-set 
v: how-many-calls
body: (set (var how-many-calls) (lambda-simple () (var counter)))
case0
hello im in replace-set 
v: how-many-calls
body: (set (var reset-count) (box (var reset-count)))
case0
hello im in replace-set 
v: how-many-calls
body: (box (var reset-count))
case elsehello im in replace-set 
v: how-many-calls
body: (set (var compute) (box (var compute)))
case0
hello im in replace-set 
v: how-many-calls
body: (box (var compute))
case elsehello im in replace-set 
v: counter
body: (seq ((set (var how-many-calls) (box (var how-many-calls))) (set (var reset-count) (box (var reset-count))) (set (var compute) (box (var compute))) (set (var counter) (const 0)) (box-set (var how-many-calls) (lambda-simple () (var counter))) (box-set (var reset-count) (lambda-simple () (set (var counter) (const 0)))) (box-set (var compute) (lambda-simple (arg) (seq ((set (var counter) (applic (var +) ((var counter) (const 1)))) (applic (var proc) ((var arg))))))) (set (var dispatch) (lambda-simple (op arg) (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (box-get (var how-many-calls)) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (box-get (var reset-count)) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0)))))) (var dispatch)))
case3
hello im in replace-set 
v: counter
body: (var dispatch)
case elsehello im in replace-set 
v: counter
body: (box-set (var compute) (lambda-simple (arg) (seq ((set (var counter) (applic (var +) ((var counter) (const 1)))) (applic (var proc) ((var arg)))))))
case elsehello im in replace-set 
v: counter
body: (set (var dispatch) (lambda-simple (op arg) (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (box-get (var how-many-calls)) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (box-get (var reset-count)) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0))))))
case0
hello im in replace-set 
v: counter
body: (lambda-simple (op arg) (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (box-get (var how-many-calls)) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (box-get (var reset-count)) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0)))))
case1
hello im in replace-set 
v: counter
body: (if3 (applic (var eq?) ((var op) (const how-many-calls?))) (applic (box-get (var how-many-calls)) ()) (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (box-get (var reset-count)) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0))))
case5
hello im in replace-set 
v: counter
body: (applic (var eq?) ((var op) (const how-many-calls?)))
case4
hello im in replace-set 
v: counter
body: (var eq?)
case elsehello im in replace-set 
v: counter
body: (var op)
case elsehello im in replace-set 
v: counter
body: (const how-many-calls?)
case elsehello im in replace-set 
v: counter
body: (applic (box-get (var how-many-calls)) ())
case4
hello im in replace-set 
v: counter
body: (box-get (var how-many-calls))
case elsehello im in replace-set 
v: counter
body: (if3 (applic (var eq?) ((var op) (const reset-count))) (applic (box-get (var reset-count)) ()) (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0)))
case5
hello im in replace-set 
v: counter
body: (applic (var eq?) ((var op) (const reset-count)))
case4
hello im in replace-set 
v: counter
body: (var eq?)
case elsehello im in replace-set 
v: counter
body: (var op)
case elsehello im in replace-set 
v: counter
body: (const reset-count)
case elsehello im in replace-set 
v: counter
body: (applic (box-get (var reset-count)) ())
case4
hello im in replace-set 
v: counter
body: (box-get (var reset-count))
case elsehello im in replace-set 
v: counter
body: (if3 (applic (var eq?) ((var op) (const compute))) (applic (box-get (var compute)) ((var arg))) (const 0))
case5
hello im in replace-set 
v: counter
body: (applic (var eq?) ((var op) (const compute)))
case4
hello im in replace-set 
v: counter
body: (var eq?)
case elsehello im in replace-set 
v: counter
body: (var op)
case elsehello im in replace-set 
v: counter
body: (const compute)
case elsehello im in replace-set 
v: counter
body: (applic (box-get (var compute)) ((var arg)))
case4
hello im in replace-set 
v: counter
body: (box-get (var compute))
case elsehello im in replace-set 
v: counter
body: (var arg)
case elsehello im in replace-set 
v: counter
body: (const 0)
case elsehello im in replace-set 
v: counter
body: (box-set (var how-many-calls) (lambda-simple () (var counter)))
case elsehello im in replace-set 
v: counter
body: (box-set (var reset-count) (lambda-simple () (set (var counter) (const 0))))
case elsehello im in replace-set 
v: counter
body: (set (var compute) (box (var compute)))
case0
hello im in replace-set 
v: counter
body: (box (var compute))
case elsehello im in replace-set 
v: counter
body: (set (var counter) (const 0))
case0
hello im in replace-set 
v: counter
body: (set (var how-many-calls) (box (var how-many-calls)))
case0
hello im in replace-set 
v: counter
body: (box (var how-many-calls))
case elsehello im in replace-set 
v: counter
body: (set (var reset-count) (box (var reset-count)))
case0
hello im in replace-set 
v: counter
body: (box (var reset-count))
case else(def (var make-monitored)
     (lambda-simple
       (proc)
       (applic
         (lambda-simple
           (counter how-many-calls reset-count compute dispatch)
           (seq ((set (var counter) (box (var counter))) (set (var how-many-calls) (box (var how-many-calls)))
                  (set (var reset-count) (box (var reset-count)))
                  (set (var compute) (box (var compute)))
                  (box-set (var counter) (const 0))
                  (box-set
                    (var how-many-calls)
                    (lambda-simple () (box-get (var counter))))
                  (box-set
                    (var reset-count)
                    (lambda-simple
                      ()
                      (set (box-get (var counter)) (const 0))))
                  (box-set
                    (var compute)
                    (lambda-simple
                      (arg)
                      (seq ((set (box-get (var counter))
                                 (applic
                                   (var +)
                                   ((box-get (var counter)) (const 1))))
                             (applic (var proc) ((var arg)))))))
                  (set (var dispatch)
                       (lambda-simple
                         (op arg)
                         (if3 (applic
                                (var eq?)
                                ((var op) (const how-many-calls?)))
                              (applic (box-get (var how-many-calls)) ())
                              (if3 (applic
                                     (var eq?)
                                     ((var op) (const reset-count)))
                                   (applic (box-get (var reset-count)) ())
                                   (if3 (applic
                                          (var eq?)
                                          ((var op) (const compute)))
                                        (applic
                                          (box-get (var compute))
                                          ((var arg)))
                                        (const 0))))))
                  (var dispatch))))
         ((const #f) (const #f) (const #f) (const #f) (const #f)))))
> 